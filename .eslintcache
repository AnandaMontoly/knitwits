[{"/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/index.js":"1","/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/reportWebVitals.js":"2","/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/App.js":"3","/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/PatternSelectScreen.jsx":"4","/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/RowActionView.js":"5"},{"size":500,"mtime":1612011017000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1611970439000,"results":"8","hashOfConfig":"7"},{"size":812,"mtime":1612011619000,"results":"9","hashOfConfig":"7"},{"size":755,"mtime":1612010604000,"results":"10","hashOfConfig":"7"},{"size":3552,"mtime":1612009815000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"dsoqa5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/index.js",[],["25","26"],"/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/reportWebVitals.js",[],"/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/App.js",["27","28","29"],"//import logo from './logo.svg';\nimport './App.css';\nimport PatternSelectScreen from './PatternSelectScreen.jsx'\nimport RowActionView from './RowActionView.js'\nimport React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n\nclass App extends Component {\n  render(){\n    // to be coded next:\n    // if context contains button click record, generate RowActionView\n    // else PatternSelectScreen. how did i do this w/project data \n  return (\n    <div className=\"App\" style={{backgroundColor:\"wheat\", color:\"#404022\"}}>\n      <header className=\"App-header\">\n         <h1> KnitWits </h1>\n         <img src={'./IMG_0069.png'} />\n       </header>\n       <PatternSelectScreen/>\n      <RowActionView/>\n    </div>\n  );\n}\n}\n\nexport default App;","/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/PatternSelectScreen.jsx",[],"/Users/sarahabowitz/Documents/Sarah's Folder/IMPORTANT/Codes/git/knitwits/src/RowActionView.js",["30"],"import './App.css';\nimport React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nclass RowActionView extends Component {\n    render(){\n        return(<Grid container spacing={3}>\n            <Grid item xs={12}>\n              <h1> Welcome </h1>\n            </Grid>\n            <Grid item xs={6}>\n              <Counter />\n            </Grid>\n            <Grid item xs={6}>\n             <TodoApp />\n            </Grid>\n          </Grid>);\n    }\n}\n\nclass Counter extends Component {\n \n    constructor(props) {\n      super(props);\n      this.state = { count: 0, left:''};\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    addClick = () => {\n      this.setState(({ count,left }) => ({\n        count: count + 1,\n        left: left -1\n      }));\n    };\n    minusClick = () => {\n      this.setState(({ count,left }) => ({\n        count: count - 1,\n        left: left +1\n      }));\n    };\n  \n    handleChange(e) {\n      this.setState({ left: e.target.value });\n    }\n  \n    handleSubmit(e) {\n      e.preventDefault();\n      document.getElementById(\"findnumrows\").style.display=\"none\";\n    }\n  \n    render() {\n      const mystyle = {\n       display: \"inline-block\",\n       border: \"none\",\n        color: \"black\",\n        padding: \"15px 32px\",\n        margin: \"15px\",\n  \n      };\n     \n      return (\n      <div>\n         <form id=\"findnumrows\" onSubmit={this.handleSubmit}>\n            <label htmlFor=\"new-todo\">\n              Number of Rows?\n            </label>\n            <input\n              id=\"numRowinput\"\n              onChange={this.handleChange}\n              value={this.state.left}\n            />\n            <button type=\"submit\">Set Number of Rows </button>\n          </form>\n        <button style={mystyle} onClick={this.addClick}>+1</button>\n        <button style={mystyle} onClick={this.minusClick}>-1</button>\n        <p>Rows Completed: {this.state.count}</p>\n        <p>Rows Left: {this.state.left}</p>\n      </div>\n      )\n    }\n  }\n  \n  class TodoApp extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { items: [], text: '' };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    render() {\n      return (\n        <div>\n          <h3>Steps to Do</h3>\n          <TodoList items={this.state.items} />\n          <form onSubmit={this.handleSubmit}>\n            \n            <label htmlFor=\"new-todo\">\n              What needs to be done?\n            </label>\n            <input\n              id=\"new-todo\"\n              onChange={this.handleChange}\n              value={this.state.text}\n            />\n            <button>\n              Add #{this.state.items.length + 1}\n            </button>\n          </form>\n        </div>\n      );\n    }\n  \n    handleChange(e) {\n      this.setState({ text: e.target.value });\n    }\n  \n    handleSubmit(e) {\n      e.preventDefault();\n      if (this.state.text.length === 0) {\n        return;\n      }\n      const newItem = {\n        text: this.state.text,\n        id: Date.now()\n      };\n      this.setState(state => ({\n        items: state.items.concat(newItem),\n        text: ''\n      }));\n    }\n  }\n  \n  class TodoList extends Component {\n    render() {\n      return (\n        <ul>\n          {this.props.items.map(item => (\n            <li key={item.id}>{item.text}</li>\n          ))}\n        </ul>\n      );\n    }\n  }\n\nexport default RowActionView;",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":6,"column":10,"nodeType":"37","messageId":"38","endLine":6,"endColumn":20},{"ruleId":"35","severity":1,"message":"39","line":7,"column":8,"nodeType":"37","messageId":"38","endLine":7,"endColumn":12},{"ruleId":"40","severity":1,"message":"41","line":19,"column":10,"nodeType":"42","endLine":19,"endColumn":40},{"ruleId":"35","severity":1,"message":"36","line":3,"column":10,"nodeType":"37","messageId":"38","endLine":3,"endColumn":20},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]