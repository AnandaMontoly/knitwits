[{"/Users/emilyrhyu/knitwits/src/index.js":"1","/Users/emilyrhyu/knitwits/src/reportWebVitals.js":"2","/Users/emilyrhyu/knitwits/src/App.js":"3","/Users/emilyrhyu/knitwits/src/small-context.js":"4","/Users/emilyrhyu/knitwits/src/ToDo.js":"5","/Users/emilyrhyu/knitwits/src/AboutUs.js":"6","/Users/emilyrhyu/knitwits/src/PatternSelectScreen.jsx":"7","/Users/emilyrhyu/knitwits/src/RowActionView.js":"8","/Users/emilyrhyu/knitwits/src/CustomPattern.js":"9"},{"size":500,"mtime":1611968423856,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1611968423858,"results":"12","hashOfConfig":"11"},{"size":2961,"mtime":1612082859236,"results":"13","hashOfConfig":"11"},{"size":319,"mtime":1612082825539,"results":"14","hashOfConfig":"11"},{"size":1519,"mtime":1612063909698,"results":"15","hashOfConfig":"11"},{"size":3793,"mtime":1612064159062,"results":"16","hashOfConfig":"11"},{"size":10074,"mtime":1612082826608,"results":"17","hashOfConfig":"11"},{"size":5925,"mtime":1612082859233,"results":"18","hashOfConfig":"11"},{"size":2287,"mtime":1612082859232,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tdj0dv",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/emilyrhyu/knitwits/src/index.js",[],"/Users/emilyrhyu/knitwits/src/reportWebVitals.js",[],"/Users/emilyrhyu/knitwits/src/App.js",["41","42"],"/Users/emilyrhyu/knitwits/src/small-context.js",[],"/Users/emilyrhyu/knitwits/src/ToDo.js",["43","44"],"/Users/emilyrhyu/knitwits/src/AboutUs.js",["45"],"/Users/emilyrhyu/knitwits/src/PatternSelectScreen.jsx",[],"/Users/emilyrhyu/knitwits/src/RowActionView.js",["46","47","48","49","50"],"import './App.css';\nimport React, { createContext, useContext, Component } from 'react';\nimport { SmallContext } from './small-context.js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\n\n/*async grabPattern = query => {\n    let response = await fetch(query, {method: 'GET', redirect: 'follow'});\n    if (response.ok) { // if HTTP-status is 200-299\n    // get the response body (the method explained below)\n    let json = await response.json();\n  } else {\n    alert(\"HTTP-Error: \" + response.status);\n  }};*/\nvar partArr = [''];\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginRight: theme.spacing(2),\n      minWidth: 120\n    }}));\n\n//const formCtrl = useStyles().formControl;\n\nclass RowActionView extends Component {\n    static contextType = SmallContext;\n    state = {\n        instructions: [],\n        query:\"\",\n        current:0\n      }\n    componentDidMount (){\n        let context = this.context;\n        var query = context.query;\n        console.log(query);\n        var queryVal = query.split(\"/\").pop();\n        this.setState({query:query})\n\n      fetch(query)\n      .then(res => res.json())\n      .then((data) =>{\n          if (data[queryVal]){\n            this.setState({instructions:JSON.parse(data[queryVal].replaceAll(\"\\\\\\\\\", \"\\\\\")\n                        .replaceAll(\"/\", \"of\").replaceAll('\"rows\":1}', '\"rows\":1},')\n                        .replaceAll('\"rows\":1},,', '\"rows\":1},')\n                        .replaceAll('\"rows\":1},}', '\"rows\":1}}'))})\n          }else{\n            this.setState({instructions:{0:{part:\"N/A\", instructions:\"This item does not exist in our database!\",rows:\"N/A\"}}})\n          }\n        }\n      )\n    }\n    updateCurrent(newNum){\n      this.setState({current: newNum})\n    }\n    constructor(props) {\n        super(props);\n        this.updateCurrent = this.updateCurrent.bind(this)\n      }\n    render(){\n        // this, instructions something else i need to peee\n        var types = [''];\n        var same = ''\n        console.log(this.state.instructions);\n        for (const key in this.state.instructions){\n            if (this.state.instructions[key].part !== same){\n                types.push(this.state.instructions[key].part);\n                same = this.state.instructions[key].part;\n                console.log(this.state.instructions[key].part);\n            }\n        }\n        return(<Grid container spacing={3}>\n            <Grid item xs={12}>\n            </Grid>\n            <Grid item xs={6}>\n              <div style={{margin:\"20px\"}}>\n                <FormControl variant=\"outlined\" fullWidth={true}>\n                    <InputLabel id=\"partDropdownLabel\" htmlFor=\"partDropdown\"> Parts </InputLabel>\n                            <Select\n                                autoWidth\n                                labelId=\"partDropdownLabel\"\n                                id=\"partDropdown\"\n                                name=\"partDropdown\"\n                            >\n                                {types.map(type => (<option value={type}>{type}</option>))}\n                            </Select>\n                </FormControl>\n             </div>\n              <Counter updateCurrent={this.updateCurrent}/>\n              {\n                ((this.state.instructions[this.state.current]!== undefined) && this.state.current>=0) ? \"Current Instruction: \"+this.state.instructions[this.state.current].instructions : \"Out of range\"\n              }\n            </Grid>\n            <Grid item xs={6}>\n\n            <a target=\"_blank\" href={this.state.query.replace(\"get\", \"pdf\")}>Printer friendly version</a>\n\n             {\n               Object.keys(this.state.instructions).map(item =>\n                <p><b>{item}</b> {this.state.instructions[item][\"part\"]} {this.state.instructions[item][\"instructions\"]} {this.state.instructions[item][\"rows\"]}</p>\n               )\n             }\n\n            </Grid>\n          </Grid>\n        );\n    }\n}\n\nclass Counter extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = { count: 0, left:''};\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    addClick = () => {\n      this.setState(({ count,left }) => ({\n        count: count + 1,\n        left: left -1\n      }));\n      this.props.updateCurrent(this.state.count);\n    };\n    minusClick = () => {\n      this.setState(({ count,left }) => ({\n        count: count - 1,\n        left: left +1\n      }));\n      this.props.updateCurrent(this.state.count);\n    };\n\n    handleChange(e) {\n      this.setState({ left: e.target.value });\n    }\n\n    handleSubmit(e) {\n      e.preventDefault();\n      document.getElementById(\"findnumrows\").style.display=\"none\";\n    }\n\n    render() {\n      const mystyle = {\n       display: \"inline-block\",\n       border: \"none\",\n        color: \"black\",\n        backgroundColor: \"gray\",\n        padding: \"15px 32px\",\n        margin: \"15px\",\n\n      };\n\n      return (\n      <div>\n         <form id=\"findnumrows\" onSubmit={this.handleSubmit}>\n            <label htmlFor=\"new-todo\">\n              Number of Rows?\n            </label>\n            <input\n              id=\"numRowinput\"\n              onChange={this.handleChange}\n              value={this.state.left}\n            />\n            <button type=\"submit\">Set Number of Rows </button>\n          </form>\n        <button style={mystyle} onClick={this.addClick}>+1</button>\n        <button style={mystyle} onClick={this.minusClick}>-1</button>\n        <p>Rows Completed: {this.state.count}</p>\n        <p>Rows Left: {this.state.left}</p>\n      </div>\n      )\n    }\n  }\n\nexport default RowActionView;\n",["51","52"],"/Users/emilyrhyu/knitwits/src/CustomPattern.js",["53"],"import React, { createContext, Component } from 'react';\n\nclass CustomPattern extends Component{\n  constructor(props){\n    super(props);\n    this.state = {currRow:0,\n                  instructions:{},\n                  topPost:\"None so far\"\n                }\n    this.formAction = this.formAction.bind(this);\n    this.postToWeb = this.postToWeb.bind(this);\n  }\n  formAction (e){\n    e.preventDefault();\n    var formData = new FormData(e.target)\n    formData = Object.fromEntries(formData.entries())\n    var newInstructions = Object.assign({}, this.state.instructions)\n    newInstructions[this.state.currRow] = formData;\n    this.setState({instructions:newInstructions});\n    this.setState({currRow:this.state.currRow+1})\n  }\n  async postToWeb(props){\n    console.log(this.state.instructions)\n    var myForm = new FormData\n    myForm.append(\"pattern\", JSON.stringify(this.state.instructions));\n    const response = await fetch(\"https://api-knitwits.ue.r.appspot.com/api/post/\", {\n      method: \"POST\",\n      body: myForm\n    });\n    const content = await response.json();\n    console.log(content.hashVal);\n    this.setState({topPost:content.hashVal})\n  }\n\n  render(){\n    return (\n        <div>\n        {\n          Object.keys(this.state.instructions).map(item =>\n            <p><b>Row: {item}</b> {this.state.instructions[item][\"part\"]} {this.state.instructions[item][\"instructions\"]} {this.state.instructions[item][\"rows\"]}</p>\n          )\n        }\n        <form style={{margin:\"10px\"}} onSubmit={this.formAction}>\n          <label for=\"part\"style={{margin:\"10px\"}}>Which part?</label>\n          <input type=\"text\" id=\"part\" name=\"part\" ></input><br />\n\n          <label for=\"rows\"style={{margin:\"10px\"}}>How many rows?</label>\n          <input type=\"text\" id=\"rows\" name=\"rows\" ></input><br />\n\n          <label for=\"instructions\"style={{margin:\"10px\"}}>Instruction for this row?</label>\n          <input type=\"text\" id=\"instructions\" name=\"instructions\" ></input><br />\n          <button style={{margin:\"10px\"}}>Add to Pattern</button><br />\n         </form>\n         <button style={{margin:\"10px\"}} onClick={this.postToWeb}>Post to the web!</button><br />\n         <h2>Your Hash Value</h2>\n         {this.state.topPost}\n        </div>\n      );\n\n  }\n}\n\nexport default CustomPattern;\n",{"ruleId":"54","severity":1,"message":"55","line":8,"column":8,"nodeType":"56","messageId":"57","endLine":8,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":68,"column":15,"nodeType":"60","messageId":"61","endLine":68,"endColumn":17},{"ruleId":"54","severity":1,"message":"62","line":2,"column":17,"nodeType":"56","messageId":"57","endLine":2,"endColumn":30},{"ruleId":"54","severity":1,"message":"63","line":2,"column":32,"nodeType":"56","messageId":"57","endLine":2,"endColumn":42},{"ruleId":"54","severity":1,"message":"64","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":14},{"ruleId":"54","severity":1,"message":"62","line":2,"column":17,"nodeType":"56","messageId":"57","endLine":2,"endColumn":30},{"ruleId":"54","severity":1,"message":"63","line":2,"column":32,"nodeType":"56","messageId":"57","endLine":2,"endColumn":42},{"ruleId":"54","severity":1,"message":"65","line":18,"column":5,"nodeType":"56","messageId":"57","endLine":18,"endColumn":12},{"ruleId":"54","severity":1,"message":"66","line":19,"column":7,"nodeType":"56","messageId":"57","endLine":19,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":100,"column":13,"nodeType":"69","endLine":100,"endColumn":78},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"54","severity":1,"message":"62","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":30},"no-unused-vars","'TodoApp' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'createContext' is defined but never used.","'useContext' is defined but never used.","'Button' is defined but never used.","'partArr' is assigned a value but never used.","'useStyles' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-global-assign","no-unsafe-negation"]