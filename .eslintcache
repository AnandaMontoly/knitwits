[{"/Users/emilyrhyu/knitwits/src/index.js":"1","/Users/emilyrhyu/knitwits/src/App.js":"2","/Users/emilyrhyu/knitwits/src/reportWebVitals.js":"3","/Users/emilyrhyu/knitwits/src/PatternSelectScreen.jsx":"4","/Users/emilyrhyu/knitwits/src/AboutUs.js":"5","/Users/emilyrhyu/knitwits/src/RowActionView.js":"6","/Users/emilyrhyu/knitwits/src/small-context.js":"7"},{"size":500,"mtime":1611968423856,"results":"8","hashOfConfig":"9"},{"size":2631,"mtime":1612062139618,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611968423858,"results":"11","hashOfConfig":"9"},{"size":8591,"mtime":1612062139619,"results":"12","hashOfConfig":"9"},{"size":3807,"mtime":1612059799281,"results":"13","hashOfConfig":"9"},{"size":4993,"mtime":1612062139621,"results":"14","hashOfConfig":"9"},{"size":228,"mtime":1612062139625,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tdj0dv",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/emilyrhyu/knitwits/src/index.js",[],"/Users/emilyrhyu/knitwits/src/App.js",["32","33","34"],"/Users/emilyrhyu/knitwits/src/reportWebVitals.js",[],"/Users/emilyrhyu/knitwits/src/PatternSelectScreen.jsx",[],["35","36"],"/Users/emilyrhyu/knitwits/src/AboutUs.js",["37"],"/Users/emilyrhyu/knitwits/src/RowActionView.js",["38","39","40","41","42","43","44","45"],"import './App.css';\nimport React, { createContext, useContext, Component } from 'react';\nimport { SmallContext } from './small-context.js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n/*async grabPattern = query => {\n    let response = await fetch(query, {method: 'GET', redirect: 'follow'});\n    if (response.ok) { // if HTTP-status is 200-299\n    // get the response body (the method explained below)\n    let json = await response.json();\n  } else {\n    alert(\"HTTP-Error: \" + response.status);\n  }};*/\nvar partArr = [''];\n\nclass RowActionView extends Component {\n    static contextType = SmallContext;   \n    state = {\n        instructions: []\n      }\n    componentDidMount (){\n        let context = this.context;\n        // const MmyContext = React.useContext(SmallContext);\n        var query = context.query;\n        console.log(query);\n\n      var query_code = query.split(\"/\").pop();\n\n      fetch(query)\n      .then(res => res.json())\n      .then((data) =>{\n          this.setState({instructions:JSON.parse(data[queryVal].replaceAll(\"\\\\\\\\\", \"\\\\\")\n                      .replaceAll(\"/\", \"of\").replaceAll('\"rows\":1}', '\"rows\":1},')\n                      .replaceAll('\"rows\":1},,', '\"rows\":1},')\n                      .replaceAll('\"rows\":1},}', '\"rows\":1}}'))})\n        }\n      )\n    }\n    constructor(props) {\n        super(props);\n      }\n    render(){\n\n        return(<Grid container spacing={3}>\n            <Grid item xs={12}>\n            </Grid>\n            <Grid item xs={6}>\n              <Counter />\n            </Grid>\n            <Grid item xs={6}>\n             <TodoApp />\n             {\n               Object.keys(this.state.instructions).map(item =>\n                <p><b>{item}</b> {this.state.instructions[item][\"part\"]} {this.state.instructions[item][\"instructions\"]} {this.state.instructions[item][\"rows\"]}</p>\n               )\n             }\n\n            </Grid>\n          </Grid>);\n    }\n}\n\nclass Counter extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = { count: 0, left:''};\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    addClick = () => {\n      this.setState(({ count,left }) => ({\n        count: count + 1,\n        left: left -1\n      }));\n    };\n    minusClick = () => {\n      this.setState(({ count,left }) => ({\n        count: count - 1,\n        left: left +1\n      }));\n    };\n\n    handleChange(e) {\n      this.setState({ left: e.target.value });\n    }\n\n    handleSubmit(e) {\n      e.preventDefault();\n      document.getElementById(\"findnumrows\").style.display=\"none\";\n    }\n\n    render() {\n      const mystyle = {\n       display: \"inline-block\",\n       border: \"none\",\n        color: \"black\",\n        backgroundColor: \"gray\",\n        padding: \"15px 32px\",\n        margin: \"15px\",\n\n      };\n\n      return (\n      <div>\n         <form id=\"findnumrows\" onSubmit={this.handleSubmit}>\n            <label htmlFor=\"new-todo\">\n              Number of Rows?\n            </label>\n            <input\n              id=\"numRowinput\"\n              onChange={this.handleChange}\n              value={this.state.left}\n            />\n            <button type=\"submit\">Set Number of Rows </button>\n          </form>\n        <button style={mystyle} onClick={this.addClick}>+1</button>\n        <button style={mystyle} onClick={this.minusClick}>-1</button>\n        <p>Rows Completed: {this.state.count}</p>\n        <p>Rows Left: {this.state.left}</p>\n      </div>\n      )\n    }\n  }\n\n  class TodoApp extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { items: [], text: '' };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    render() {\n      return (\n        <div>\n          <h3>Steps to Do</h3>\n          <TodoList items={this.state.items} />\n          <form onSubmit={this.handleSubmit}>\n\n            <label htmlFor=\"new-todo\">\n              What needs to be done?\n            </label>\n            <input\n              id=\"new-todo\"\n              onChange={this.handleChange}\n              value={this.state.text}\n            />\n            <button>\n              Add #{this.state.items.length + 1}\n            </button>\n          </form>\n        </div>\n      );\n    }\n\n    handleChange(e) {\n      this.setState({ text: e.target.value });\n    }\n\n    handleSubmit(e) {\n      e.preventDefault();\n      if (this.state.text.length === 0) {\n        return;\n      }\n      const newItem = {\n        text: this.state.text,\n        id: Date.now()\n      };\n      this.setState(state => ({\n        items: state.items.concat(newItem),\n        text: ''\n      }));\n    }\n  }\n\n  class TodoList extends Component {\n    render() {\n      return (\n        <ul>\n          {this.props.items.map(item => (\n            <li key={item.id}>{item.text}</li>\n          ))}\n        </ul>\n      );\n    }\n  }\n\nexport default RowActionView;\n","/Users/emilyrhyu/knitwits/src/small-context.js",[],{"ruleId":"46","severity":1,"message":"47","line":7,"column":8,"nodeType":"48","messageId":"49","endLine":7,"endColumn":19},{"ruleId":"46","severity":1,"message":"50","line":8,"column":8,"nodeType":"48","messageId":"49","endLine":8,"endColumn":12},{"ruleId":"51","severity":1,"message":"52","line":51,"column":10,"nodeType":"53","endLine":51,"endColumn":40},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"46","severity":1,"message":"58","line":6,"column":8,"nodeType":"48","messageId":"49","endLine":6,"endColumn":14},{"ruleId":"46","severity":1,"message":"59","line":2,"column":17,"nodeType":"48","messageId":"49","endLine":2,"endColumn":30},{"ruleId":"46","severity":1,"message":"60","line":3,"column":10,"nodeType":"48","messageId":"49","endLine":3,"endColumn":22},{"ruleId":"46","severity":1,"message":"61","line":4,"column":10,"nodeType":"48","messageId":"49","endLine":4,"endColumn":20},{"ruleId":"62","severity":1,"message":"63","line":23,"column":7,"nodeType":"64","messageId":"65","endLine":33,"endColumn":8},{"ruleId":"46","severity":1,"message":"66","line":37,"column":11,"nodeType":"48","messageId":"49","endLine":37,"endColumn":19},{"ruleId":"46","severity":1,"message":"67","line":54,"column":15,"nodeType":"48","messageId":"49","endLine":54,"endColumn":21},{"ruleId":"68","severity":1,"message":"69","line":59,"column":11,"nodeType":"70","messageId":"71","endLine":59,"endColumn":15,"fix":"72"},{"ruleId":"73","severity":1,"message":"74","line":66,"column":5,"nodeType":"75","messageId":"76","endLine":68,"endColumn":8},"no-unused-vars","'Breadcrumbs' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["77"],"no-negated-in-lhs",["78"],"'Button' is defined but never used.","'createContext' is defined but never used.","'SmallContext' is defined but never used.","'makeStyles' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'json_obj' is defined but never used.","'status' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"79","text":"80"},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation",[1984,1995],""]